// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.1

package shortener

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	urlAnalyticsFieldNames          = builder.RawFieldNames(&UrlAnalytics{})
	urlAnalyticsRows                = strings.Join(urlAnalyticsFieldNames, ",")
	urlAnalyticsRowsExpectAutoSet   = strings.Join(stringx.Remove(urlAnalyticsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	urlAnalyticsRowsWithPlaceHolder = strings.Join(stringx.Remove(urlAnalyticsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	urlAnalyticsModel interface {
		Insert(ctx context.Context, data *UrlAnalytics) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*UrlAnalytics, error)
		Update(ctx context.Context, data *UrlAnalytics) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultUrlAnalyticsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UrlAnalytics struct {
		Id         uint64         `db:"id"`           // ID, 主键
		ShortUrlId uint64         `db:"short_url_id"` // 关联的short_urls表ID
		IpAddress  string         `db:"ip_address"`   // 访问者IP地址
		UserAgent  sql.NullString `db:"user_agent"`   // 访问者User-Agent
		Referer    sql.NullString `db:"referer"`      // 访问来源
		CreatedAt  time.Time      `db:"created_at"`   // 访问时间
	}
)

func newUrlAnalyticsModel(conn sqlx.SqlConn) *defaultUrlAnalyticsModel {
	return &defaultUrlAnalyticsModel{
		conn:  conn,
		table: "`url_analytics`",
	}
}

func (m *defaultUrlAnalyticsModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUrlAnalyticsModel) FindOne(ctx context.Context, id uint64) (*UrlAnalytics, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", urlAnalyticsRows, m.table)
	var resp UrlAnalytics
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUrlAnalyticsModel) Insert(ctx context.Context, data *UrlAnalytics) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, urlAnalyticsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ShortUrlId, data.IpAddress, data.UserAgent, data.Referer)
	return ret, err
}

func (m *defaultUrlAnalyticsModel) Update(ctx context.Context, data *UrlAnalytics) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, urlAnalyticsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ShortUrlId, data.IpAddress, data.UserAgent, data.Referer, data.Id)
	return err
}

func (m *defaultUrlAnalyticsModel) tableName() string {
	return m.table
}
