// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.1

package shortener

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	shortUrlsFieldNames          = builder.RawFieldNames(&ShortUrls{})
	shortUrlsRows                = strings.Join(shortUrlsFieldNames, ",")
	shortUrlsRowsExpectAutoSet   = strings.Join(stringx.Remove(shortUrlsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	shortUrlsRowsWithPlaceHolder = strings.Join(stringx.Remove(shortUrlsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	shortUrlsModel interface {
		Insert(ctx context.Context, data *ShortUrls) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*ShortUrls, error)
		FindOneByShortKey(ctx context.Context, shortKey string) (*ShortUrls, error)
		FindOneByUserIdOriginalUrlMd5(ctx context.Context, userId uint64, originalUrlMd5 string) (*ShortUrls, error)
		Update(ctx context.Context, data *ShortUrls) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultShortUrlsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ShortUrls struct {
		Id             uint64       `db:"id"`               // ID, 主键
		UserId         uint64       `db:"user_id"`          // 创建用户的ID
		ShortKey       string       `db:"short_key"`        // 短链接的唯一key
		OriginalUrl    string       `db:"original_url"`     // 原始长链接
		OriginalUrlMd5 string       `db:"original_url_md5"` // 原始长链接的MD5哈希值，用于去重
		CreatedAt      time.Time    `db:"created_at"`       // 创建时间
		UpdatedAt      time.Time    `db:"updated_at"`       // 更新时间
		ExpiresAt      sql.NullTime `db:"expires_at"`       // 过期时间, NULL表示永不过期
		DeletedAt      sql.NullTime `db:"deleted_at"`       // 软删除时间, NULL表示未删除
	}
)

func newShortUrlsModel(conn sqlx.SqlConn) *defaultShortUrlsModel {
	return &defaultShortUrlsModel{
		conn:  conn,
		table: "`short_urls`",
	}
}

func (m *defaultShortUrlsModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultShortUrlsModel) FindOne(ctx context.Context, id uint64) (*ShortUrls, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", shortUrlsRows, m.table)
	var resp ShortUrls
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultShortUrlsModel) FindOneByShortKey(ctx context.Context, shortKey string) (*ShortUrls, error) {
	var resp ShortUrls
	query := fmt.Sprintf("select %s from %s where `short_key` = ? limit 1", shortUrlsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, shortKey)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultShortUrlsModel) FindOneByUserIdOriginalUrlMd5(ctx context.Context, userId uint64, originalUrlMd5 string) (*ShortUrls, error) {
	var resp ShortUrls
	query := fmt.Sprintf("select %s from %s where `user_id` = ? and `original_url_md5` = ? limit 1", shortUrlsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId, originalUrlMd5)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultShortUrlsModel) Insert(ctx context.Context, data *ShortUrls) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, shortUrlsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.ShortKey, data.OriginalUrl, data.OriginalUrlMd5, data.ExpiresAt, data.DeletedAt)
	return ret, err
}

func (m *defaultShortUrlsModel) Update(ctx context.Context, newData *ShortUrls) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, shortUrlsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.UserId, newData.ShortKey, newData.OriginalUrl, newData.OriginalUrlMd5, newData.ExpiresAt, newData.DeletedAt, newData.Id)
	return err
}

func (m *defaultShortUrlsModel) tableName() string {
	return m.table
}
