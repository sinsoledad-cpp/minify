// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.1

package shortener

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	aggDailySummaryFieldNames          = builder.RawFieldNames(&AggDailySummary{})
	aggDailySummaryRows                = strings.Join(aggDailySummaryFieldNames, ",")
	aggDailySummaryRowsExpectAutoSet   = strings.Join(stringx.Remove(aggDailySummaryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	aggDailySummaryRowsWithPlaceHolder = strings.Join(stringx.Remove(aggDailySummaryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	aggDailySummaryModel interface {
		Insert(ctx context.Context, data *AggDailySummary) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*AggDailySummary, error)
		FindOneByShortUrlIdSummaryDate(ctx context.Context, shortUrlId uint64, summaryDate time.Time) (*AggDailySummary, error)
		Update(ctx context.Context, data *AggDailySummary) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultAggDailySummaryModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AggDailySummary struct {
		Id             uint64    `db:"id"`
		ShortUrlId     uint64    `db:"short_url_id"`
		SummaryDate    time.Time `db:"summary_date"`    // 统计日期
		TotalClicks    uint64    `db:"total_clicks"`    // 总点击量
		UniqueVisitors uint64    `db:"unique_visitors"` // 独立访客数 (UV)
	}
)

func newAggDailySummaryModel(conn sqlx.SqlConn) *defaultAggDailySummaryModel {
	return &defaultAggDailySummaryModel{
		conn:  conn,
		table: "`agg_daily_summary`",
	}
}

func (m *defaultAggDailySummaryModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAggDailySummaryModel) FindOne(ctx context.Context, id uint64) (*AggDailySummary, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", aggDailySummaryRows, m.table)
	var resp AggDailySummary
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAggDailySummaryModel) FindOneByShortUrlIdSummaryDate(ctx context.Context, shortUrlId uint64, summaryDate time.Time) (*AggDailySummary, error) {
	var resp AggDailySummary
	query := fmt.Sprintf("select %s from %s where `short_url_id` = ? and `summary_date` = ? limit 1", aggDailySummaryRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, shortUrlId, summaryDate)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAggDailySummaryModel) Insert(ctx context.Context, data *AggDailySummary) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, aggDailySummaryRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ShortUrlId, data.SummaryDate, data.TotalClicks, data.UniqueVisitors)
	return ret, err
}

func (m *defaultAggDailySummaryModel) Update(ctx context.Context, newData *AggDailySummary) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, aggDailySummaryRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ShortUrlId, newData.SummaryDate, newData.TotalClicks, newData.UniqueVisitors, newData.Id)
	return err
}

func (m *defaultAggDailySummaryModel) tableName() string {
	return m.table
}
