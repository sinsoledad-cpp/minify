Name: shortener
Host: 0.0.0.0
Port: 8888

Auth:
  AccessSecret: "a_secret_key_change_it_later" # 替换为你自己的 Secret
  AccessExpire: 86400 # 24 小时

Database:
  DataSource: "root:root@tcp(localhost:3306)/minify?charset=utf8mb4&parseTime=True&loc=Local" # ⭐ 你的数据库连接 DSN (注意数据库名可能是 minify 或 lucid)

CacheRedis: # ⭐ Redis 配置 (用于 links 缓存)
  - Host: localhost:6379
    # Pass: "" # 如果你的 Redis 有密码
    Type: node

# CasbinModelPath: "etc/rbac_model.conf" # ⭐ Casbin 模型路径 (如果需要在此初始化 Casbin)

Snowflake:
  WorkerId: 1

Casbin:
  ModelPath: "etc/rbac_model.conf"  # 指向项目根目录的 etc
  PolicyPath: "etc/policy.csv"    # 指向项目根目录的 etc

LinkEventProducer:
  Brokers:
    - "localhost:9092" # 对应你的 docker-compose.yml
  Topic: "shortener_link_accessed" # ⭐ 使用你选择的 Topic 名

LinkEventConsumer:
  Name: link-event-consumer # ⭐ 1. 添加消费者名称 (自定义)
  Brokers:
    - "localhost:9092"         # 和 API 配置一致
  Group: "shortener-job-group"   # ⭐ 消费者组名称
  Topic: "shortener_link_accessed" # 和 API 配置一致
  Offset: last         # ⭐ 2. 添加 Offset: 'first' 表示从最早的消息开始消费 (如果组是新的)，'last' 表示从最新的消息开始
  Consumers: 6          # ⭐ 3. 添加 Consumers: 建议设置为 Topic 的分区数 (你设置了 6)
  Processors: 16         # ⭐ 4. 添加 Processors: 处理消息的 worker 数量，可以比 Consumers 多，以提高并发处理能力
  # MinBytes 和 MaxBytes 等其他参数可以按需添加，这里使用默认值