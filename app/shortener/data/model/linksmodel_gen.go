// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.1

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	linksFieldNames          = builder.RawFieldNames(&Links{})
	linksRows                = strings.Join(linksFieldNames, ",")
	linksRowsExpectAutoSet   = strings.Join(stringx.Remove(linksFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	linksRowsWithPlaceHolder = strings.Join(stringx.Remove(linksFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheLinksIdPrefix        = "cache:links:id:"
	cacheLinksShortCodePrefix = "cache:links:shortCode:"
)

type (
	linksModel interface {
		Insert(ctx context.Context, data *Links) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Links, error)
		FindOneByShortCode(ctx context.Context, shortCode string) (*Links, error)
		Update(ctx context.Context, data *Links) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultLinksModel struct {
		sqlc.CachedConn
		table string
	}

	Links struct {
		Id             uint64       `db:"id"`
		UserId         uint64       `db:"user_id"`         // 创建者ID，关联 users(id)
		ShortCode      string       `db:"short_code"`      // 短链接码 (e.g., aZ89bC)
		OriginalUrl    string       `db:"original_url"`    // 原始长链接
		VisitCount     uint64       `db:"visit_count"`     // 总访问次数 (冗余字段，由报表系统异步更新)
		IsActive       int64        `db:"is_active"`       // 是否启用 (1=启用, 0=禁用)
		ExpirationTime sql.NullTime `db:"expiration_time"` // 过期时间 (NULL 为永不过期)
		CreatedAt      time.Time    `db:"created_at"`      // 创建时间 (微秒精度)
		UpdatedAt      time.Time    `db:"updated_at"`      // 更新时间 (微秒精度)
		DeletedAt      sql.NullTime `db:"deleted_at"`      // 软删除时间 (NULL 表示未删除)
	}
)

func newLinksModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultLinksModel {
	return &defaultLinksModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`links`",
	}
}

func (m *defaultLinksModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	linksIdKey := fmt.Sprintf("%s%v", cacheLinksIdPrefix, id)
	linksShortCodeKey := fmt.Sprintf("%s%v", cacheLinksShortCodePrefix, data.ShortCode)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, linksIdKey, linksShortCodeKey)
	return err
}

func (m *defaultLinksModel) FindOne(ctx context.Context, id uint64) (*Links, error) {
	linksIdKey := fmt.Sprintf("%s%v", cacheLinksIdPrefix, id)
	var resp Links
	err := m.QueryRowCtx(ctx, &resp, linksIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", linksRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLinksModel) FindOneByShortCode(ctx context.Context, shortCode string) (*Links, error) {
	linksShortCodeKey := fmt.Sprintf("%s%v", cacheLinksShortCodePrefix, shortCode)
	var resp Links
	err := m.QueryRowIndexCtx(ctx, &resp, linksShortCodeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `short_code` = ? limit 1", linksRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, shortCode); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLinksModel) Insert(ctx context.Context, data *Links) (sql.Result, error) {
	linksIdKey := fmt.Sprintf("%s%v", cacheLinksIdPrefix, data.Id)
	linksShortCodeKey := fmt.Sprintf("%s%v", cacheLinksShortCodePrefix, data.ShortCode)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, linksRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.ShortCode, data.OriginalUrl, data.VisitCount, data.IsActive, data.ExpirationTime, data.DeletedAt)
	}, linksIdKey, linksShortCodeKey)
	return ret, err
}

func (m *defaultLinksModel) Update(ctx context.Context, newData *Links) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	linksIdKey := fmt.Sprintf("%s%v", cacheLinksIdPrefix, data.Id)
	linksShortCodeKey := fmt.Sprintf("%s%v", cacheLinksShortCodePrefix, data.ShortCode)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, linksRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.ShortCode, newData.OriginalUrl, newData.VisitCount, newData.IsActive, newData.ExpirationTime, newData.DeletedAt, newData.Id)
	}, linksIdKey, linksShortCodeKey)
	return err
}

func (m *defaultLinksModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheLinksIdPrefix, primary)
}

func (m *defaultLinksModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", linksRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLinksModel) tableName() string {
	return m.table
}
