// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.1

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	linkAccessLogsFieldNames          = builder.RawFieldNames(&LinkAccessLogs{})
	linkAccessLogsRows                = strings.Join(linkAccessLogsFieldNames, ",")
	linkAccessLogsRowsExpectAutoSet   = strings.Join(stringx.Remove(linkAccessLogsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	linkAccessLogsRowsWithPlaceHolder = strings.Join(stringx.Remove(linkAccessLogsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	linkAccessLogsModel interface {
		Insert(ctx context.Context, data *LinkAccessLogs) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*LinkAccessLogs, error)
		Update(ctx context.Context, data *LinkAccessLogs) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultLinkAccessLogsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	LinkAccessLogs struct {
		Id          uint64         `db:"id"`
		LinkId      uint64         `db:"link_id"`      // 关联的链接ID links(id)
		ShortCode   string         `db:"short_code"`   // 访问的短码 (冗余，方便查询)
		AccessedAt  time.Time      `db:"accessed_at"`  // 访问时间 (微秒精度)
		IpAddress   string         `db:"ip_address"`   // 访问者 IP (需考虑 IPv6)
		UserAgent   sql.NullString `db:"user_agent"`   // 访问者 User-Agent
		Referer     sql.NullString `db:"referer"`      // 访问来源
		GeoCountry  sql.NullString `db:"geo_country"`  // IP解析-国家 (ETL处理后填入)
		GeoCity     sql.NullString `db:"geo_city"`     // IP解析-城市 (ETL处理后填入)
		DeviceType  sql.NullString `db:"device_type"`  // UA解析-设备类型 (ETL处理后填入)
		BrowserName sql.NullString `db:"browser_name"` // UA解析-浏览器 (ETL处理后填入)
		OsName      sql.NullString `db:"os_name"`      // UA解析-操作系统 (ETL处理后填入)
	}
)

func newLinkAccessLogsModel(conn sqlx.SqlConn) *defaultLinkAccessLogsModel {
	return &defaultLinkAccessLogsModel{
		conn:  conn,
		table: "`link_access_logs`",
	}
}

func (m *defaultLinkAccessLogsModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultLinkAccessLogsModel) FindOne(ctx context.Context, id uint64) (*LinkAccessLogs, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", linkAccessLogsRows, m.table)
	var resp LinkAccessLogs
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLinkAccessLogsModel) Insert(ctx context.Context, data *LinkAccessLogs) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, linkAccessLogsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.LinkId, data.ShortCode, data.AccessedAt, data.IpAddress, data.UserAgent, data.Referer, data.GeoCountry, data.GeoCity, data.DeviceType, data.BrowserName, data.OsName)
	return ret, err
}

func (m *defaultLinkAccessLogsModel) Update(ctx context.Context, data *LinkAccessLogs) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, linkAccessLogsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.LinkId, data.ShortCode, data.AccessedAt, data.IpAddress, data.UserAgent, data.Referer, data.GeoCountry, data.GeoCity, data.DeviceType, data.BrowserName, data.OsName, data.Id)
	return err
}

func (m *defaultLinkAccessLogsModel) tableName() string {
	return m.table
}
