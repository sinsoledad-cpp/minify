// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.1

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	analyticsSummaryDailyFieldNames          = builder.RawFieldNames(&AnalyticsSummaryDaily{})
	analyticsSummaryDailyRows                = strings.Join(analyticsSummaryDailyFieldNames, ",")
	analyticsSummaryDailyRowsExpectAutoSet   = strings.Join(stringx.Remove(analyticsSummaryDailyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	analyticsSummaryDailyRowsWithPlaceHolder = strings.Join(stringx.Remove(analyticsSummaryDailyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	analyticsSummaryDailyModel interface {
		Insert(ctx context.Context, data *AnalyticsSummaryDaily) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*AnalyticsSummaryDaily, error)
		FindOneByLinkIdDateDimensionTypeDimensionValue(ctx context.Context, linkId uint64, date time.Time, dimensionType string, dimensionValue string) (*AnalyticsSummaryDaily, error)
		Update(ctx context.Context, data *AnalyticsSummaryDaily) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultAnalyticsSummaryDailyModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AnalyticsSummaryDaily struct {
		Id             uint64    `db:"id"`
		LinkId         uint64    `db:"link_id"`         // 关联的链接ID links(id)
		Date           time.Time `db:"date"`            // 聚合的日期 (e.g., 2025-10-21)
		DimensionType  string    `db:"dimension_type"`  // 维度类型 (e.g., total, timeseries_hourly, referer, country, browser, os, device)
		DimensionValue string    `db:"dimension_value"` // 维度值 (e.g., 10 (for hourly), google.com, USA, Chrome)
		ClickCount     uint64    `db:"click_count"`     // 该维度在该天的总点击次数
	}
)

func newAnalyticsSummaryDailyModel(conn sqlx.SqlConn) *defaultAnalyticsSummaryDailyModel {
	return &defaultAnalyticsSummaryDailyModel{
		conn:  conn,
		table: "`analytics_summary_daily`",
	}
}

func (m *defaultAnalyticsSummaryDailyModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAnalyticsSummaryDailyModel) FindOne(ctx context.Context, id uint64) (*AnalyticsSummaryDaily, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", analyticsSummaryDailyRows, m.table)
	var resp AnalyticsSummaryDaily
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAnalyticsSummaryDailyModel) FindOneByLinkIdDateDimensionTypeDimensionValue(ctx context.Context, linkId uint64, date time.Time, dimensionType string, dimensionValue string) (*AnalyticsSummaryDaily, error) {
	var resp AnalyticsSummaryDaily
	query := fmt.Sprintf("select %s from %s where `link_id` = ? and `date` = ? and `dimension_type` = ? and `dimension_value` = ? limit 1", analyticsSummaryDailyRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, linkId, date, dimensionType, dimensionValue)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAnalyticsSummaryDailyModel) Insert(ctx context.Context, data *AnalyticsSummaryDaily) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, analyticsSummaryDailyRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.LinkId, data.Date, data.DimensionType, data.DimensionValue, data.ClickCount)
	return ret, err
}

func (m *defaultAnalyticsSummaryDailyModel) Update(ctx context.Context, newData *AnalyticsSummaryDaily) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, analyticsSummaryDailyRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.LinkId, newData.Date, newData.DimensionType, newData.DimensionValue, newData.ClickCount, newData.Id)
	return err
}

func (m *defaultAnalyticsSummaryDailyModel) tableName() string {
	return m.table
}
